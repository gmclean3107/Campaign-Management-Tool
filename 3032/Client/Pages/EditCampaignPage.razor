@page "/EditCampaign/{id}"
@using CampaignManagementTool.Client.Services;
@using CampaignManagementTool.Shared;
@using CampaignManagementTool.Client.Controls;
@using CampaignManagementTool.Client.Components.Inputs
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions;
@attribute [Authorize]
@inject ILogger<NewCampaignPage> Logger;
@inject CampaignClientService CampaignService;
@inject NavigationManager NavigationManager;


<header>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold leading-tight tracking-tight text-gray-900">Edit Campaign</h1>
        <Button OnClick="ViewHistory">View History</Button>
    </div>
</header>
<main>
    <div class="mx-auto max-w-7xl sm:px-6 lg:px-8">
        <EditCampaignControl Model="@Model" OnSave="OnSave" ExportToCsvSingle="ExportToCsvSingle" FormMode="FormMode.Edit"></EditCampaignControl>
    </div>
    @if (showFields)
    {
        <div class="text-red-600 text-center mt-4">
            The following is invalid:
            @foreach (string field in invalidFields)
            {
                <br>
                @field;    
            }
        </div>
    }
</main>

@code
{

    [Parameter]
    public string Id { get; set; }

    public Campaign? Model { get; set; }

    private List<string> invalidFields;
    private bool showFields;

    protected override async Task OnInitializedAsync()
    {
        Model = await CampaignService.GetByIdAsync(Id);

        Model.ExpiryDays = DateTime.Parse(Model.ExpiryDays).Subtract(DateTime.Now.Date).TotalDays.ToString();

        await base.OnInitializedAsync();
    }


    private async Task OnSave()
    {
        showFields = false;
        invalidFields = new List<string>();
        if (ValidateInput())
        {
            if (double.TryParse(Model.ExpiryDays, out double result) && !Double.IsNaN(result) && !Double.IsInfinity(result))
            {
                DateTime expiry = DateTime.Now.AddDays(result);
                Model.ExpiryDays = expiry.ToString("yyyy-MM-dd");
            }
            else
            {
                Model.ExpiryDays = DateTime.Now.ToString("yyyy-MM-dd");
            }
                var success = await CampaignService.UpdateAsync(Model);

                if (success)
                {
                    NavigationManager.NavigateTo("ListCampaigns");
                }
            }
        else
        {
            showFields = true;
        }
    }

    private async Task ExportToCsvSingle()
    {
        await CampaignService.ExportToCsvSingleAsync(Id);
    }

    private void ViewHistory()
    {
        NavigationManager.NavigateTo($"/ViewHistory/{Id}");
    }

    private bool ValidateInput()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Model.CampaignCode))
        {
            isValid = false;
            invalidFields.Add("Campaign Code");
        }
        if (string.IsNullOrWhiteSpace(Model.AffiliateCode))
        {
            isValid = false;
            invalidFields.Add("Affiliate Code");
        }
        if (string.IsNullOrWhiteSpace(Model.ExpiryDays))
        {
            isValid = false;
            invalidFields.Add("Expiry Days");
        }
        if ((!string.IsNullOrWhiteSpace(Model.Rules) && Model.Rules.Length > 1000) || (string.IsNullOrWhiteSpace(Model.Rules) && !string.IsNullOrWhiteSpace(Model.RulesUrl)))
        {
            isValid = false;
            invalidFields.Add("Rules");
        }

        string urlPattern = @"^((https?|ftp):\/\/)?(www\.)?[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,}[^\s]*$";

        if ((!string.IsNullOrWhiteSpace(Model.Rules) && string.IsNullOrWhiteSpace(Model.RulesUrl)) || ((!string.IsNullOrWhiteSpace(Model.Rules)) && !string.IsNullOrWhiteSpace(Model.RulesUrl) && !Regex.IsMatch(Model.RulesUrl, urlPattern)))
        {
            isValid = false;
            invalidFields.Add("Rules Url");
        }

        if (!string.IsNullOrWhiteSpace(Model.ProducerCode) && Model.ProducerCode.Length > 1000)
        {
            isValid = false;
            invalidFields.Add("Producer Code");
        }

        return isValid;
    }
}