@page "/ListCampaigns"
@page "/"
@using CampaignManagementTool.Client.Components;
@using CampaignManagementTool.Client.Components.Tables;
@using CampaignManagementTool.Client.Services;
@using CampaignManagementTool.Shared;
@using CampaignManagementTool.Client.Components.Inputs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.JSInterop;
@attribute [Authorize]
@inject NavigationManager NavigationManager;
@inject CampaignClientService CampaignService;
@inject IJSRuntime JSRuntime
@inject RolesClientService RolesService;


@if (_canAccess)
{

    <header>
        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <h1 class="text-3xl font-bold leading-tight tracking-tight text-gray-900">List Campaigns</h1>
        </div>
    </header>
    <main>
        <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
            <div class="mt-8 flow-root">
                <div class="mb-4">
                    <InputText @bind-Value="_searchQuery" Placeholder="Search Campaigns..."/>
                    <Button OnClick="() => FilterSearch()" class="ml-2">Search</Button>
                    <Button OnClick="() => ResetSearch()" class="ml-2">Reset</Button>
                    <div class="flex justify-end">
                        <div class="absolute ml-4">
                            <div>
                                <Button OnClick="() => ToggleDropdown()" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                                    Sort By
                                </Button>
                            </div>
                            @if (isDropdownOpen)
                            {
                                <div class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
                                    <div class="py-2 flex flex-col space-y-2 items-center">
                                        <Button OnClick='() => SortCampaigns("sort1")'>Alphabetical Asc.</Button>
                                        <Button OnClick='() => SortCampaigns("sort2")'>Alphabetical Desc.</Button>
                                        <Button OnClick='() => SortCampaigns("sort3")'>Expiry Date Asc.</Button>
                                        <Button OnClick='() => SortCampaigns("sort4")'>Expiry Date Desc.</Button>
                                        <!-- Add more sorting options as needed -->
                                    </div>
                                </div>
                            }
                        </div>
                    </div>


                    <div class="dropdown ml-auto">
                        <label for="filterTitle"><strong>Filters</strong></label>
                        <div class="dropdown-menu" aria-labelledby="filterDropdown">
                            <form>
                                <div class="form-check">
                                    <input type="radio" id="filter0" name="filter" checked="@(_selectedFilter == "filter0")" @onchange='(e) => HandleFilterChange(e, "filter0")'/>
                                    <label for="filter0">All Campaigns</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" id="filter1" name="filter" @onchange='(e) => HandleFilterChange(e, "filter1")'/>
                                    <label for="filter1">Approval Required</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" id="filter2" name="filter" @onchange='(e) => HandleFilterChange(e, "filter2")'/>
                                    <label for="filter2">No Approval Required</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" id="filter3" name="filter" @onchange='(e) => HandleFilterChange(e, "filter3")'/>
                                    <label for="filter3">Active</label>
                                </div>
                                <div class="form-check">
                                    <input type="radio" id="filter4" name="filter" @onchange='(e) => HandleFilterChange(e, "filter4")'/>
                                    <label for="filter4">Deleted</label>
                                </div>
                                <!-- More filters can be added here -->
                            </form>
                        </div>
                    </div>

                </div>


                <div class="-mx-4 -my-2 sm:-mx-6 lg:-mx-8">
                    <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                        @if (_campaigns != null)
                        {
                            <Table>
                                <TableHead>
                                    <TableRow>
                                        <TableHeader>Code</TableHeader>
                                        <TableHeader>Affiliate</TableHeader>
                                        <TableHeader>Requires Approval</TableHeader>
                                        <TableHeader>Rules URL</TableHeader>
                                        <TableHeader>Expiry Date</TableHeader>
                                        <TableHeader>Active</TableHeader>
                                        <TableHeader>Edit</TableHeader>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    @foreach (var c in _filteredCampaigns)
                                    {
                                        <TableRow>
                                            <TableColumn>@c.CampaignCode</TableColumn>
                                            <TableColumn>@c.AffiliateCode</TableColumn>
                                            <TableColumn>@c.RequiresApproval.ToString()</TableColumn>
                                            <TableColumn>@c.RulesUrl</TableColumn>
                                            <TableColumn>@DateTime.ParseExact(c.ExpiryDays, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None).ToString("dd/MM/yyyy")</TableColumn>
                                            <TableColumn>@(!c.isDeleted)</TableColumn>
                                            <TableColumn>
                                                <Button OnClick="() => OpenCampaign(c)">Edit</Button>
                                                <Button OnClick="() => OpenCampaignView(c)">View</Button>
                                            </TableColumn>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        }
                        else
                        {
                            <div class="flex justify-center">
                                <LoadingSpinner></LoadingSpinner>
                            </div>
                        }
                    </div>
                </div>
                <div>

                    @if (isFiltered)
                    {
                        <Button OnClick="() => ExportToCsvButton()">
                            Export Filtered to CSV
                        </Button>
                    }
                    else
                    {
                        <Button OnClick="() => ExportToCsvButton()">
                            Export All to CSV
                        </Button>
                    }
                </div>
            </div>
        </div>
    </main>
}
else
{
    <div class="rounded-md bg-red-50 p-4 max-w-7xl mx-auto">
        <div class="flex">
            <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.28 7.22a.75.75 0 00-1.06 1.06L8.94 10l-1.72 1.72a.75.75 0 101.06 1.06L10 11.06l1.72 1.72a.75.75 0 101.06-1.06L11.06 10l1.72-1.72a.75.75 0 00-1.06-1.06L10 8.94 8.28 7.22z" clip-rule="evenodd" />
                </svg>
            </div>
            <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">You are not authorized to List Campaigns.</h3>
            </div>
        </div>
    </div>
}

@code {
    private List<Campaign>? _campaigns;
    private List<Campaign>? _filteredCampaigns;
    private SearchFilters _searchFilter;
    private string _searchQuery = "";
    private string _selectedFilter = "filter0";
    private string _sortString = "";
    private System.Timers.Timer _expiryCheckTimer;
    private bool isFiltered = false;
    private bool isDropdownOpen = false;

    private bool _canAccess;

    protected override async Task OnInitializedAsync()
    {
        _canAccess = await RolesService.HasRole(Roles.Viewer);

        _campaigns = await CampaignService.GetAllAsync();
        _searchFilter = new SearchFilters();
        _filteredCampaigns = _campaigns;

        _expiryCheckTimer = new System.Timers.Timer();
        _expiryCheckTimer.Interval = TimeSpan.FromSeconds(30).TotalMilliseconds;
        _expiryCheckTimer.AutoReset = true;
        _expiryCheckTimer.Elapsed += async (sender, e) => await ReloadPage();
        _expiryCheckTimer.Start();

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Opens the campaign for editing.
    /// </summary>
    /// <param name="c">The campaign to edit.</param>
    private void OpenCampaign(Campaign c)
    {
        NavigationManager.NavigateTo($"EditCampaign/{c.CampaignCode}");
    }

    /// <summary>
    /// Opens the campaign for viewing.
    /// </summary>
    /// <param name="c">The campaign to view.</param>
    private void OpenCampaignView(Campaign c)
    {
        NavigationManager.NavigateTo($"ViewCampaign/{c.CampaignCode}");
    }

    /// <summary>
    /// Exports filtered or all campaigns to CSV.
    /// </summary>
    private async Task ExportToCsvButton()
    {
        byte[] csvData;
        string fileName = ""; // Specify the filename here

        if (!isFiltered)
        {
            csvData = await CampaignService.ExportToCsvAsync();
            fileName = "AllCampaigns.csv";
        }
        else
        {
            csvData = await CampaignService.ExportToCsvFilteredAsync(_searchFilter);
            fileName = "FilteredCampaigns.csv";
        }

        if (csvData != null && csvData.Length > 0)
        {
            await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(csvData));
        }
    }

    /// <summary>
    /// Filters the campaigns based on search, sort and filter.
    /// </summary>
    private async Task FilterSearch()
    {
        //Set filter
        switch (_selectedFilter)
        {
            case "filter1":
                _searchFilter.Filter = 1;
                break;
            case "filter2":
                _searchFilter.Filter = 2;
                break;
            case "filter3":
                _searchFilter.Filter = 3;
                break;
            case "filter4":
                _searchFilter.Filter = 4;
                break;
            default:
                _searchFilter.Filter = 0;
                break;
        }

        //Set sort
        switch (_sortString)
        {
            case "sort1":
                _searchFilter.Sort = 1;
                break;
            case "sort2":
                _searchFilter.Sort = 2;
                break;
            case "sort3":
                _searchFilter.Sort = 3;
                break;
            case "sort4":
                _searchFilter.Sort = 4;
                break;
            default:
                _searchFilter.Sort = 0;
                break;
        }


        //Set search
        if (string.IsNullOrWhiteSpace(_searchQuery) && _searchFilter.Filter.Equals(0) && _searchFilter.Sort.Equals(0))
        {
            _filteredCampaigns = _campaigns;
            isFiltered = false;
        }
        else
        {
            isFiltered = true;
            _searchFilter.Search = _searchQuery;
            _filteredCampaigns = await CampaignService.CampaignSearchFilterAsync(_searchFilter);
        }

        StateHasChanged();
    }

    /// <summary>
    /// Resets the search, sort and filter.
    /// </summary>
    private void ResetSearch()
    {
        _searchQuery = "";
        _selectedFilter = "filter0";
        _filteredCampaigns = _campaigns;
        _sortString = "";
        isFiltered = false;
    }

    /// <summary>
    /// Sets the value of the variable that stores what filter to use.
    /// </summary>
    /// <param name="e"></param>
    /// <param name="filterID">ID of selected filter</param>
    private void HandleFilterChange(ChangeEventArgs e, string filterID)
    {
        _selectedFilter = filterID;
    }

    /// <summary>
    /// Reloads the page.
    /// </summary>
    private async Task ReloadPage()
    {
        if (!isFiltered)
        {
            _filteredCampaigns = await CampaignService.GetAllAsync();
        }
        else
        {
            await FilterSearch();    
        }
        Console.WriteLine("Page Reloaded");
        StateHasChanged();
    }

    /// <summary>
    /// Toggles the dropdown menu for sorting.
    /// </summary>
    private void ToggleDropdown()
    {
        if (isDropdownOpen)
        {
            isDropdownOpen = false;    
        }
        else
        {
            isDropdownOpen = true;
        }
        StateHasChanged();
    }

    /// <summary>
    /// Sets value of variable that stores what sort option to use.
    /// </summary>
    /// <param name="sortInput">Selected sort option</param>
    private void SortCampaigns(string sortInput)
    {
        _sortString = sortInput;
        ToggleDropdown();
    }
}