@page "/ListCampaigns"

@using CampaignManagementTool.Client.Components;
@using CampaignManagementTool.Client.Components.Tables;
@using CampaignManagementTool.Client.Services;
@using CampaignManagementTool.Shared;
@using CampaignManagementTool.Client.Components.Inputs
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject NavigationManager NavigationManager;
@inject CampaignClientService CampaignService;

<header>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <h1 class="text-3xl font-bold leading-tight tracking-tight text-gray-900">List Campaigns</h1>
    </div>
</header>
<main>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div class="mt-8 flow-root">
            <div class="mb-4">
                <InputText @bind-Value="_searchQuery" Placeholder="Search Campaigns..." />
                <Button OnClick="() => Search()" class="ml-2">Search</Button>
                <Button OnClick="() => ResetSearch()" class="ml-2">Reset</Button>

                <div class="dropdown ml-auto">
                    <label for="filterTitle"><strong>Filters</strong></label>
                    <div class="dropdown-menu" aria-labelledby="filterDropdown">
                        <form>
                            <div class="form-check">
                                <input type="radio" id="filter1" name="filter" @onchange='(e) => HandleFilterChange(e, "filter1")' />
                                <label for="filter1">Approval Required</label>
                            </div>
                            <div class="form-check">
                                <input type="radio" id="filter2" name="filter" @onchange='(e) => HandleFilterChange(e, "filter2")' />
                                <label for="filter2">No Approval Required</label>
                            </div>
                            <!-- More filters can be added here -->
                        </form>
                    </div>
                </div>

            </div>
            <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
                    @if (_campaigns != null)
                    {
                        <Table>
                            <TableHead>
                                <TableRow>
                                    <TableHeader>Code</TableHeader>
                                    <TableHeader>Affiliate</TableHeader>
                                    <TableHeader>Requires Approval</TableHeader>
                                    <TableHeader>Rules URL</TableHeader>
                                    <TableHeader>Edit</TableHeader>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                @foreach (var c in _filteredCampaigns)
                                {
                                    <TableRow>
                                        <TableColumn>@c.CampaignCode</TableColumn>
                                        <TableColumn>@c.AffiliateCode</TableColumn>
                                        <TableColumn>@c.RequiresApproval.ToString()</TableColumn>
                                        <TableColumn>@c.RulesUrl</TableColumn>
                                        <TableColumn><Button OnClick="() => OpenCampaign(c)">Edit</Button> </TableColumn>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    }
                    else
                    {
                        <div class="flex justify-center">
                            <LoadingSpinner></LoadingSpinner>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</main>

@code {
    private List<Campaign>? _campaigns;
    private List<Campaign>? _filteredCampaigns;
    private string _searchQuery = "";

    protected override async Task OnInitializedAsync()
    {
        _campaigns = await CampaignService.GetAllAsync();
        _filteredCampaigns = _campaigns;
        await base.OnInitializedAsync();
    }

    private void OpenCampaign(Campaign c)
    {
        NavigationManager.NavigateTo($"EditCampaign/{c.CampaignCode}");
    }

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(_searchQuery))
        {
            _filteredCampaigns = _campaigns;
        }
        else
        {
            _filteredCampaigns = await CampaignService.CampaignSearchAsync(_searchQuery);
        }

        StateHasChanged();
    }

    private async Task ResetSearch()
    {
        _searchQuery = "";
        _filteredCampaigns = _campaigns;
    }

    private async Task HandleFilterChange(ChangeEventArgs e, string filterID)
    {
        // Handle filter changes here
        // You may update _filteredCampaigns based on the selected filters

        

        int filter = 0;
        Console.WriteLine(filterID);
        switch (filterID)
        {
            case "filter1":
                filter = 1;
                break;
            case "filter2":
                filter = 2;
                break;
            default:
                filter = 0;
                break;
        }

        _filteredCampaigns = await CampaignService.HandleFilterAsync(filter);

    }

}